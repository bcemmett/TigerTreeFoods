<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAl1
        0AAJedgACXnXAAl51wALgOgABT9yAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKedcACnnXAAp51wAKedcAC3nXAAp51wAJcssAAAAAAAAA
        AAAAAAAAAHvaAAt51wAHedcBB3jXAAp51wAKedcACnjWAAp51wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACoDkAAp51wAKedceCnnXRQp51yQKedcACnnXAAp5
        1wAKedcAAAAAAAAAAAAKedcACnnXOQp516QKeddvCnnXFwp51xUKedcCCnnXAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAp62AAKedcACnnXAAp514MKedfwCnnXYAp5
        10UKedeECnnXKQp51wAAAAAACWe6AAp51wAKedd+CnnX6wp515IKedfPCnnXqQp51wwKedcAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACnnXAAp51wkKedc0CnnXpQp5
        17YKedcKCnnXqgp518cKedclCnnXAAAAAAALeNcACnnXAAp512wKedfBCnnXqAp51+cKeddFCnbbAQp5
        1AAJhxcAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKedcACnnXKQp5
        15MKedeMCnnXzwp51ycKedfBCnnXcgp51wAQedwACnrYAAAAAAAKedcACnnXNQp51+UKedf1CnnX0Qp5
        1BEJgW0ACYcWAAqIFwAJjBcAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAp5
        1wAKedcPCnnXmQp512oKede2CnnX0Ap51+0Kede9CnnXIwp51wAKedcACnnXAAp51wAKedcUCnnX1wp5
        1/8Kedj3Cn+HqQmHFIwJhxctCYcXAAmHFwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAACnnXAAp51wAKedcqCnnXrwp513QKedfkCnnX/wp51/8KedfYCnnXbAp51g0KedcJCnnXLAp5
        11gKedfbCnnX/wp52f8Ke7b/CYQu/wmHFMEJhhcZCYcXAAmHFwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAIZrYADXjXAAp51wAKeddfCnnXpQp517IKedf/CnnX/wp51/8Kedf7CnnXswp5
        17UKedfqCnnX+wp51/8Kedf/CnnX/wp41/8IZmf/CYEZ/wmIFXsJhxIACYcWAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKfd8ACnnXAAp51zMKedfKCnnXywp51/8Kedf/CnnX/wp5
        1/8Kedf/CnnW/wp41f8Kedf/CnnX/wp51/8Kedf/CnrZ/wdbov8IbnH/CYcl1AmIDxoJhxYAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKedcACnnXKwp519kKedfjCnnX/wp5
        1/8Kedf/CnjV/wp51/8Jcsv/CWu+/wp62P8Jc8z/CnbS/wp51/8Ketn/CWm7/wlrvP8Jgmn6CYgMTwmB
        awAKedcACnnXAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAp51wAKedcOCnnXwAp5
        1/8Kedf/CnnX/wp31P8IZrb/CnjW/wlswP8IYq//Cnva/wlnuP8Jc8z/CnnY/wp51/8Kd9P/CnfV/wp8
        sP8JgleWCnjdLgp51w8KedcAC4XuAAmJFwAJhhYACYYXAAmIFwAAAAAAAAAAAAAAAAAAAAAAViL/AAp5
        1wAKeddKCnnX6Ap51/8Ketj/CWy//wdYnP8Ke9r/CWq8/whcpP8Ke9v/CGOw/wlxyP8Ketj/CnnX/wp5
        1/8Kedf/CnnV/wp6zfYKedfuCnnXZgp51wAKedgACYcXAAmGFwALixkACYcXAAmFFwAAAAAAAAAAAAAA
        AAAJfNoACXnWAA963wAKeddKCnnX1Ap52P4Jc8z/CFyk/Ap41u8Ja7/gB1eG5wp7z8sIYKyvCW7EwAp6
        2OYKedf/CnnX/wp51/8Kedj/CnjW/wp51/8KedelCXjWAgp51gAJhxcACYcXFAmHF0YJhxcBCYcXAAAA
        AAAAAAAAAAAAAAAAAAAJeNUACnnWAAp51wAKedciCnnXXAp5128IXqZXCXDIMwlzsSUJgCKsCYUuVAAA
        /wAJdM4LCnnXKQp5124KedfQCnbU/wp00P8JbsX/CnbTzQp5100LedoACnnWAAmHFwAJhxcsCYcXyQmH
        Fy0JhxcACYYXAAAAAAAAAAAAAAAAAAAAAAAKd9QACXnXAAp51wAKedcACnjWAAdaoAAJeoAACYgMIQmH
        FuMJhxaMCoMtAAl3wAAKedcACnnSAAp8yyQIZ5PLCW2q/wp9lO8JfoY7Cn2ZAAp51gAJhDQACYcXAAmH
        F1YJhxf+CYcXjRGHFAAJhxcAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAmH
        FwAJhxdOCYcX/AmHF9gJhxcfCYcXAAmFLQAIiQAACnnPAAmCKJMJhTX/CYcb7AmIDy0JhxUACny1AAmG
        FwAIhhcDCYcXowmHF/8JhxfUCYcXFwmHFwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAACYcXAAmHF20Jhxf/CYcX/wmHF4QHgg0ACYcXAAiGFwAJhxQACYcWdgmHFf8JhxftCYcXLwmH
        FwAJhxcACYcXAAmHFz4JhxftCYcX/wmHF+4JhxcxCYcXAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAJhxcACYcXcgmHF/8Jhxf/CYcX7gmHF1QJhxcACYcXAAmHFwAJhxdhCYcX/wmH
        F+oJhxcrCYcXAAmHFwAJhxcWCYcXvAmHF/8Jhxf/CYcX7wmHFzEJhxcAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAmHFwAJhxdXCYcX/AmHF/8Jhxf/CYcX5AmHF1YIhhUBCYcXAAmH
        F00Jhxf6CYcX4QmHFyAJhxcACYcXFAmHF6IJhxf/CYcX/wmHF/8JhxfPCYcXFQmHFwAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACYcXAAmHFyIJhxfdCYcX/wmHF/8Jhxf/CYcX8QmH
        F4wJhxckCYcXDgmHF1sJhxdQCYYWBwmHFzYJhxe2CYcX/wmHF/8Jhxf/CYcX+wmHF2sJiBcACIYXAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAALhxcACoISAQmHF24Jhxf6CYcX/wmH
        F/8Jhxf/CYcX/wmHF94JhxeWCYcXWQmHF1wJhxeeCYcX6AmHF/8Jhxf/CYcX/wmHF/UJhxeECYcXCAmH
        FwAJhxcAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAmHFwAJhxc4CYcXGAmH
        F3QJhxfpCYcX/wmHF/8Jhxf/CYcX/wmHF/8Jhxf+CYcX/gmHF/8Jhxf/CYcX/wmHF/QJhxe/CYcXUgiG
        FgQIhhYHCogYAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACYcXAAmH
        F2kJhxeFCYYXCwmHFzAJhxeECYcXugmHF84JhxfkCYcX/wmHF/8JhxfyCYcXrgmHF5YJhxd2CYcXPgiH
        FwoJhxcNCYcXagmHF0UJhxcAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAJhxcACYcXPQmHF+0JhxevCYcXTwmHFykJhxc0CYcXaQmHF88Jhxf/CYcX/wmHF/wJhxeyCYcXVgmH
        FzYJhxc/CYcXcgmHF8QJhxfmCYcXMAmHFwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAmHFwAJhxcJCYcXqwmHF/8Jhxf6CYcX6gmHF+kJhxf5CYcX/wmHF/8Jhxf0CYcX+wmH
        F/8Jhxf8CYcX8wmHF/cJhxf/CYcX/wmHF6cJhhcGCYcXAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAACYcWAAmHFwAJhxcpCYcXwwmHF/8Jhxf/CYcX/wmHF/8Jhxf4CYcXuQmH
        F0oJhxdoCYcX0wmHF/0Jhxf/CYcX/wmHF/8JhxfTCYcXMAmHFwAJhhcAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA2/4IACogYAAmHFwAJhxcaCYcXcQmHF6oJhxexCYcXkQmH
        F00JhxYOCYcXAAmHFwAJhxcbCYcXXgmHF5cJhxeqCYcXhgmHFyoJhxcACIUWAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAHexQACYcYAAmHFwAJhxcACYcWAwmG
        FgQKiBgACYcXAAmHFgAJhxcACIUXAAmHFwAJhxcAC4gZAAiHFwMJhxcACYcXAAiHFgAJhBYAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACYsXAAiG
        FwAJhxcACYYXAAiGFwAIhxcAAAAAAAAAAAAAAAAAFf80AAeIFQAIhxYACIcXAAmHFwAJiRcAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAACCAAAABAAEgAIAAAAAAAAAAAAAAAIAGgAAAAAAAAAaAAAAGgAAAAEIAA
        AACAAAAAgAAAAAAAAAAAAAAAAAAAAAAAAAAIAAAAAAAAAEBAAAAAgAAAAIAAAAAAAAAAgAAAAAAAAAAA
        AACAAAAAQEAAAAAAAAAAAAAAAAAAAABAAEA=
</value>
  </data>
</root>